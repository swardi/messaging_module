input CreateNote {
  author: String!
  noteText: String!
  timeStamp: String!
}

input CreateNoteInput {
  author: String!
  noteText: String!
  timeStamp: String!
  clientMutationId: String!
}

type CreateNotePayload {
  viewer: Viewer!
  clientMutationId: String!
  note: Note
  edge: NoteEdge
}

input DeleteNoteInput {
  id: ID!
  clientMutationId: String!
}

type DeleteNotePayload {
  viewer: Viewer!
  clientMutationId: String!
  note: Note
  edge: NoteEdge
  deletedId: ID
}

# HelloPayload
type HelloPayload {
  message: String!
}

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
  updateOrCreateNote(input: UpdateOrCreateNoteInput!): UpdateOrCreateNotePayload
  deleteNote(input: DeleteNoteInput!): DeleteNotePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Note implements Node {
  author: String!
  id: ID!
  noteText: String!
  timeStamp: String!
}

# A connection to a list of items.
type NoteConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NoteEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type NoteEdge {
  # The item at the end of the edge.
  node: Note!

  # A cursor for use in pagination.
  cursor: String!
}

input NoteFilter {
  # Logical AND on all given filters.
  AND: [NoteFilter!]

  # Logical OR on all given filters.
  OR: [NoteFilter!]
  author: String

  # All values that are not equal to given value.
  author_not: String

  # All values that are contained in given list.
  author_in: [String!]

  # All values that are not contained in given list.
  author_not_in: [String!]

  # All values less than the given value.
  author_lt: String

  # All values less than or equal the given value.
  author_lte: String

  # All values greater than the given value.
  author_gt: String

  # All values greater than or equal the given value.
  author_gte: String

  # All values containing the given string.
  author_contains: String

  # All values not containing the given string.
  author_not_contains: String

  # All values starting with the given string.
  author_starts_with: String

  # All values not starting with the given string.
  author_not_starts_with: String

  # All values ending with the given string.
  author_ends_with: String

  # All values not ending with the given string.
  author_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  noteText: String

  # All values that are not equal to given value.
  noteText_not: String

  # All values that are contained in given list.
  noteText_in: [String!]

  # All values that are not contained in given list.
  noteText_not_in: [String!]

  # All values less than the given value.
  noteText_lt: String

  # All values less than or equal the given value.
  noteText_lte: String

  # All values greater than the given value.
  noteText_gt: String

  # All values greater than or equal the given value.
  noteText_gte: String

  # All values containing the given string.
  noteText_contains: String

  # All values not containing the given string.
  noteText_not_contains: String

  # All values starting with the given string.
  noteText_starts_with: String

  # All values not starting with the given string.
  noteText_not_starts_with: String

  # All values ending with the given string.
  noteText_ends_with: String

  # All values not ending with the given string.
  noteText_not_ends_with: String
  timeStamp: String

  # All values that are not equal to given value.
  timeStamp_not: String

  # All values that are contained in given list.
  timeStamp_in: [String!]

  # All values that are not contained in given list.
  timeStamp_not_in: [String!]

  # All values less than the given value.
  timeStamp_lt: String

  # All values less than or equal the given value.
  timeStamp_lte: String

  # All values greater than the given value.
  timeStamp_gt: String

  # All values greater than or equal the given value.
  timeStamp_gte: String

  # All values containing the given string.
  timeStamp_contains: String

  # All values not containing the given string.
  timeStamp_not_contains: String

  # All values starting with the given string.
  timeStamp_starts_with: String

  # All values not starting with the given string.
  timeStamp_not_starts_with: String

  # All values ending with the given string.
  timeStamp_ends_with: String

  # All values not ending with the given string.
  timeStamp_not_ends_with: String
}

enum NoteOrderBy {
  author_ASC
  author_DESC
  id_ASC
  id_DESC
  noteText_ASC
  noteText_DESC
  timeStamp_ASC
  timeStamp_DESC
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input UpdateNote {
  author: String
  id: ID!
  noteText: String
  timeStamp: String
}

input UpdateNoteInput {
  author: String
  id: ID!
  noteText: String
  timeStamp: String
  clientMutationId: String!
}

type UpdateNotePayload {
  viewer: Viewer!
  clientMutationId: String!
  note: Note
  edge: NoteEdge
}

input UpdateOrCreateNoteInput {
  update: UpdateNote!
  create: CreateNote!
  clientMutationId: String!
}

type UpdateOrCreateNotePayload {
  viewer: Viewer!
  clientMutationId: String!
  note: Note
  edge: NoteEdge
}

# This is the famous Relay viewer object
type Viewer {
  allNotes(filter: NoteFilter, orderBy: NoteOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  Note(id: ID): Note

  # hello
  hello(name: String): HelloPayload
  id: ID!
}

